/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useGLTF, useScroll } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import gsap from "gsap";
import React, { useLayoutEffect, useRef } from "react";

export function BellTower(props) {
  const NB_FLOORS = 3;

  const FLOOR_HEIGHT = 2.3;
  const { nodes, materials } = useGLTF("./models/Bell.glb");
  const ref = useRef();
  const tl = useRef();
  const firstRef = useRef();
  const secondRef = useRef();

  const scroll = useScroll();

  useFrame(() => {
    tl.current.seek(scroll.offset * tl.current.duration());
  });

  useLayoutEffect(() => {
    tl.current = gsap.timeline();

    tl.current.to(
      ref.current.position,
      {
        duration: 2,
        y: -FLOOR_HEIGHT * (NB_FLOORS - 1),
      },
      0
    );

    tl.current.to(
      ref.current.rotation,
      { duration: 1, x: 0, y: Math.PI / 6, z: 0 },
      0
    );
    tl.current.to(
      ref.current.rotation,
      { duration: 1, x: 0, y: -Math.PI / 6, z: 0 },
      1
    );

    tl.current.to(
      ref.current.position,
      {
        duration: 1,
        x: -1,
        z: 2,
      },
      0
    );
    tl.current.to(
      ref.current.position,
      {
        duration: 1,
        x: 1,
        z: 2,
      },
      1
    );
  }, []);
  useLayoutEffect(() => {
    if (nodes.Bell_Tower_1) {
      firstRef.current = nodes.Bell_Tower_1;
    }
  }, [nodes]);

  useLayoutEffect(() => {
    // Ensure firstRef.current is defined before performing animations
    if (firstRef.current) {
      gsap.to(firstRef.current.position, {
        y: -scroll.offset * 0.5,
        duration: 0.5,
      });

      gsap.to(firstRef.current.rotation, {
        y: -Math.PI / 2,
        duration: 0.5,
      });
    }
    if (secondRef.current) {
      gsap.to(secondRef.current.position, {
        y: 2,
        duration: 1.5,
      });

      gsap.to(secondRef.current.rotation, {
        y: Math.PI / 2,
        duration: 0.5,
      });
      gsap.to(secondRef.current.rotation, {
        z: -2,
        duration: 0.5,
      });
    }
  }, [scroll.offset]);
  useFrame((state, delta) => {
    ref.current.rotation.y += 0.01 * delta;
  });

  useLayoutEffect(() => {
    gsap.to(nodes.Bell_Tower_1.position, {
      y: -scroll.offset * 0.5,
      duration: 0.5,
    });

    gsap.to(nodes.Bell_Tower_2.position, {
      y: -scroll.offset * 0.7,
      duration: 0.5,
    });
    gsap.to(nodes.Bell_Tower_3.position, {
      y: -scroll.offset * 0.9,
      duration: 0.5,
    });

    gsap.to(nodes.Bell_Tower_4.position, {
      y: -scroll.offset * 7,
      duration: 0.5,
    });
    gsap.to(nodes.Bell_Tower_5.position, {
      y: -scroll.offset * 3,
      duration: 0.5,
    });

    gsap.to(nodes.Bell_Tower_6.position, {
      y: -scroll.offset * 0.07,
      duration: 0.5,
    });
    gsap.to(nodes.Bell_Tower_7.position, {
      y: -scroll.offset * 0.05,
      duration: 0.5,
    });

    gsap.to(nodes.Bell_Tower_8.position, {
      y: -scroll.offset * 0.07,
      duration: 0.5,
    });
    gsap.to(nodes.Bell_Tower_9.position, {
      y: -scroll.offset * 0.9,
      duration: 0.5,
    });

    gsap.to(nodes.Bell_Tower_10.position, {
      y: -scroll.offset * 0.7,
      duration: 0.5,
    });
  }, [scroll.offset, nodes]);

  return (
    <group
      {...props}
      dispose={null}
      ref={ref}
      rotation={[0, -Math.PI / 4, 0]}
    >
      <group rotation={[-Math.PI / 2, 0, 0]} scale={100}>
        <mesh
          geometry={nodes.Bell_Tower_1.geometry}
          material={materials.Stone_Light}
        />
        <mesh
          geometry={nodes.Bell_Tower_2.geometry}
          material={materials.Stone_Dark}
        />
        <mesh
          geometry={nodes.Bell_Tower_3.geometry}
          material={materials.Wood}
        />
        <mesh
          geometry={nodes.Bell_Tower_4.geometry}
          material={materials.Wood_Side}
        />
        <mesh
          geometry={nodes.Bell_Tower_5.geometry}
          material={materials.Bell}
        />
        <mesh
          geometry={nodes.Bell_Tower_6.geometry}
          material={materials.Stone}
        />
        <mesh
          geometry={nodes.Bell_Tower_7.geometry}
          material={materials.Wood_Light}
        />
        <mesh
          geometry={nodes.Bell_Tower_8.geometry}
          material={materials.Windows}
        />
        <mesh
          geometry={nodes.Bell_Tower_9.geometry}
          material={materials.RoofTiles}
        />
        <mesh
          geometry={nodes.Bell_Tower_10.geometry}
          material={materials.Beige}
        />
      </group>
    </group>
  );
}

useGLTF.preload("./models/Bell.glb");
